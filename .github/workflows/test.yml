name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-asyncio httpx

    - name: Create test directories
      run: |
        cd backend
        mkdir -p test_uploads test_models test_outputs

    - name: Run unit tests
      run: |
        cd backend
        python -m pytest tests/ -m "unit" --cov=app --cov-report=xml --cov-report=term-missing

    - name: Run integration tests
      run: |
        cd backend
        python -m pytest tests/ -m "integration" --cov=app --cov-append --cov-report=xml --cov-report=term-missing

    - name: Run all tests with coverage
      run: |
        cd backend
        python -m pytest tests/ --cov=app --cov-report=xml --cov-report=html --cov-fail-under=80

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        directory: ./backend/
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

    - name: Archive test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          backend/htmlcov/
          backend/coverage.xml
          backend/pytest-report.xml

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy

    - name: Run black
      run: |
        cd backend
        black --check --diff app/ tests/

    - name: Run isort
      run: |
        cd backend
        isort --check-only --diff app/ tests/

    - name: Run flake8
      run: |
        cd backend
        flake8 app/ tests/

    - name: Run mypy
      run: |
        cd backend
        mypy app/ --ignore-missing-imports

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run bandit security linter
      run: |
        cd backend
        bandit -r app/ -f json -o bandit-report.json || true

    - name: Run safety check
      run: |
        cd backend
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          backend/bandit-report.json
          backend/safety-report.json